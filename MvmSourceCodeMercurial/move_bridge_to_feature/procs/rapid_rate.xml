<procs>

  <proc name="rapid_rate">
    <if>
      <condition>GLOBAL.test_proc ne ''</condition>
      <then>
        <call_proc_for_current_object>
          <name>GLOBAL.test_proc</name>
        </call_proc_for_current_object>
      </then>
      <else>
        <print>'nothing to do since GLOBAL.test_proc eq ""'</print>
      </else>
    </if>
  </proc>

  <proc name="generate_domain_model">
    <param name="static_oid"/>
    <param name="generate_dir"/>

    <debug>'--------------- in generate_domain_model'~TEMP.generate_dir</debug>

    <do>TEMP.entity=OBJECT(TEMP.static_oid).object_type</do>
    <do>TEMP.class=TEMP.entity</do>
    <do>TEMP.namespace='MetraTech.DomainModel.MvmEntityTypes'</do>
    <do>TEMP.full_class_name=TEMP.namespace~'.'~TEMP.class</do>
    <do>TEMP.localization_namespace='metratech.com/'~TEMP.entity</do>
    <do>TEMP.localization_extension='MVM'</do>
    
    <replace>
      <input>TEMP.localization_namespace</input>
      <old_value>'/'</old_value>
      <new_value>'_'</new_value>
      <output>TEMP.localization_namespace_file</output>
    </replace>
    <c>TBD: make locales dynamic</c>
    <do>
      TEMP.localization_files='
      "'~TEMP.localization_namespace_file~'_de.xml",
      "'~TEMP.localization_namespace_file~'_fr.xml",
      "'~TEMP.localization_namespace_file~'_it.xml",
      "'~TEMP.localization_namespace_file~'_jp.xml",
      "'~TEMP.localization_namespace_file~'_us.xml"'
    </do>
    <do>
      TEMP.src=
      '//------------------------------------------------------------------------------
      // &lt;auto-generated&gt;
      //     This code was generated by mvm.exe.
      //     Runtime Version:
      //
      //     Changes to this file may cause incorrect behavior and will be lost if
      //     the code is regenerated.
      //
      // &lt;/auto-generated&gt;
      //------------------------------------------------------------------------------
      namespace '~TEMP.namespace~'
      {
      using System.Collections.Generic;

      [System.Runtime.Serialization.DataContractAttribute()]
      [System.SerializableAttribute()]
      public class '~TEMP.class~' : MetraTech.DomainModel.BaseTypes.BaseObject
      {
      '
    </do>
    <index_select>
      <index>'OBJECT_FIELDS'</index>
      <field name="static_oid">TEMP.static_oid</field>
      <cursor>TEMP.csr1</cursor>
      <loop>
        <do>TEMP.field_name=OBJECT(TEMP.csr1).field_name</do>
        <index_select>
          <index>'OBJECT_FIELD_METADATA'</index>
          <field name="static_oid">TEMP.static_oid</field>
          <field name="field_name">TEMP.field_name</field>
          <cursor>TEMP.csr2</cursor>
          <loop>
            <do>TEMP.datatype=OBJECT(TEMP.csr2).datatype</do>
            <do>TEMP.namespace=OBJECT(TEMP.csr2).namespace</do>
            <do>TEMP.length=OBJECT(TEMP.csr2).length</do>
            <uncapitalize>
              <input>TEMP.field_name</input>
              <output>TEMP.privateField</output>
            </uncapitalize>
            <capitalize>
              <input>TEMP.field_name</input>
              <output>TEMP.PublicProperty</output>
            </capitalize>
            <do>TEMP.isPrivateFieldDirty='is'~TEMP.PublicProperty~'Dirty'</do>
            <do>TEMP.IsPublicPropertyDirty='Is'~TEMP.PublicProperty~'Dirty'</do>
            <do>TEMP.PublicDisplayName=TEMP.PublicProperty~'DisplayName'</do>
            <do>TEMP.localization_id=TEMP.localization_namespace~'/'~TEMP.field_name</do>
            <capitalize>
              <input>TEMP.full_class_name~'.'~TEMP.field_name</input>
              <output>TEMP.resource_id</output>
            </capitalize>
            <do>TEMP.msix_type=TEMP.datatype</do>
            <do>TEMP.csharp_type=TEMP.datatype</do>
            <if>
              <condition>TEMP.datatype='enum'</condition>
              <then>
                <do>TEMP.csharp_type='System.Nullable&lt;MetraTech.DomainModel.Enums.Core.Global.CountryName&gt;'</do>
              </then>
            </if>
            <if>
              <condition>TEMP.datatype eq 'string' or 1 eq 1</condition>
              <then>
                <do>
                  TEMP.src ~=
                  '
                  [System.Runtime.Serialization.DataMemberAttribute(IsRequired=false, EmitDefaultValue=false)]
                  private bool '~TEMP.isPrivateFieldDirty~' = false;

                  private string '~TEMP.privateField~';

                  [System.Web.Script.Serialization.ScriptIgnoreAttribute()]
                  public bool '~TEMP.IsPublicPropertyDirty~'
                  {
                  get
                  {
                  return this.'~TEMP.isPrivateFieldDirty~' ;
                  }
                  }

                  [System.Runtime.Serialization.DataMemberAttribute(IsRequired=false, EmitDefaultValue=false)]
                  [MetraTech.DomainModel.Common.MTDataMemberAttribute(IsRequired=false, Length=100, Description="description for '~TEMP.privateField~'", MsixType="'~TEMP.msix_type~'")]
                  public string '~TEMP.PublicProperty~'
                  {
                  get
                  {
                  return this.'~TEMP.privateField~';
                  }
                  set
                  {
                  this.'~TEMP.privateField~' = value;
                  this.'~TEMP.isPrivateFieldDirty~' = true;
                  }
                  }

                  [MetraTech.DomainModel.Common.MTPropertyLocalizationAttribute(ResourceId="'~TEMP.resource_id~'", DefaultValue="'~TEMP.field_name~'", MTLocalizationId="'~TEMP.localization_id~'", Extension="'~TEMP.localization_extension~'", LocaleSpace="'~TEMP.localization_namespace~'", LocalizationFiles=new string[] {
                  '~TEMP.localization_files~'})]
                  public string '~TEMP.PublicDisplayName~'
                  {
                  get
                  {
                  return ResourceManager.GetString("'~TEMP.resource_id~'");
                  }
                  }
                  '
                </do>
              </then>
            </if>
          </loop>
        </index_select>
      </loop>
    </index_select>
    <do>
      TEMP.src~='
      } //end class
      } // end namespace
      '
    </do>
    <do>TEMP.src_file=TEMP.generate_dir~'/'~TEMP.entity~'.cs'</do>
    <print>'Writing domain model file='~TEMP.src_file</print>
    <print_text_to_file>
      <file>TEMP.src_file</file>
      <text>TEMP.src</text>
    </print_text_to_file>

  </proc>


  <proc name="copy_metadata">
    <param name="src_static_oid"/>
    <param name="src_field_name"/>
    <param name="tgt_static_oid"/>
    <param name="tgt_field_name"/>
    <print>'copy_metadata for '~TEMP.src_static_oid~'/'~OBJECT(TEMP.src_static_oid).object_type~'.'~TEMP.src_field_name~' to '~TEMP.tgt_static_oid~'/'~OBJECT(TEMP.tgt_static_oid).object_type~'.'~TEMP.tgt_field_name</print>
    <index_select>
      <index>'OBJECT_FIELD_METADATA'</index>
      <field name="static_oid">TEMP.src_static_oid</field>
      <field name="field_name">TEMP.src_field_name</field>
      <cursor>TEMP.csr</cursor>
      <then>
        <do>TEMP.src_datatype=OBJECT(TEMP.csr).datatype</do>
        <do>TEMP.src_namespace=OBJECT(TEMP.csr).namespace</do>
        <do>TEMP.src_length=OBJECT(TEMP.csr).length</do>
        <do>TEMP.src_rate_type=OBJECT(TEMP.csr).rate_type</do>
        <do>TEMP.src_unique_rate_row=OBJECT(TEMP.csr).unique_rate_row</do>
        <call_proc_for_current_object>
          <name>'add_metadata'</name>
          <param name="static_oid">TEMP.tgt_static_oid</param>
          <param name="field_name">TEMP.tgt_field_name</param>
          <param name="datatype">TEMP.src_datatype</param>
          <param name="namespace">TEMP.src_namespace</param>
          <param name="length">TEMP.src_length</param>
          <param name="rate_type">TEMP.src_rate_type</param>
          <param name="unique_rate_row">TEMP.src_unique_rate_row</param>
        </call_proc_for_current_object>
      </then>
    </index_select>
  </proc>


  <proc name="add_metadata">
    <param name="static_oid"/>
    <param name="field_name"/>
    <param name="datatype" default="''"/>
    <param name="namespace" default="''"/>
    <param name="length" default="''"/>
    <param name="rate_type" default="''"/>
    <param name="unique_rate_row" default="''"/>
    <index_select>
      <index>'OBJECT_FIELD_METADATA'</index>
      <field name="static_oid">TEMP.static_oid</field>
      <field name="field_name">TEMP.field_name</field>
      <cursor>TEMP.csr</cursor>
      <then>
        <c> already added the meta data, check for conflicts </c>
      </then>
      <else>
        <index_insert>
          <index>'OBJECT_FIELDS'</index>
          <field name="static_oid">TEMP.static_oid</field>
          <field name="field_name">TEMP.field_name</field>
        </index_insert>
        <index_insert>
          <index>'OBJECT_FIELD_METADATA'</index>
          <field name="static_oid">TEMP.static_oid</field>
          <field name="field_name">TEMP.field_name</field>
          <field name="datatype">TEMP.datatype</field>
          <field name="namespace">TEMP.namespace</field>
          <field name="length">TEMP.length</field>
          <field name="rate_type">TEMP.rate_type</field>
          <field name="unique_rate_row">TEMP.unique_rate_row</field>
        </index_insert>
      </else>
    </index_select>
  </proc>

  <proc name="clear_metadata">
    <param name="static_oid"/>
    <index_select>
      <index>'OBJECT_FIELDS'</index>
      <field name="static_oid">TEMP.static_oid</field>
      <cursor>TEMP.csr</cursor>
      <loop>
        <do>TEMP.field_name=OBJECT(TEMP.csr).field_name</do>
        <index_remove>
          <index>'OBJECT_FIELD_METADATA</index>
          <field name="static_oid">TEMP.static_oid</field>
          <field name="field_name">TEMP.field_name</field>
        </index_remove>
      </loop>
    </index_select>
    <index_remove>
      <index>'OBJECT_FIELDS</index>
      <field name="static_oid">TEMP.static_oid</field>
    </index_remove>
  </proc>

  <proc name="global">
    <startup>

      <define_memory_index>
        <index>'OBJECT_FIELDS'</index>
        <key_field>'static_oid'</key_field>
        <field>'field_name'</field>
      </define_memory_index>

      <define_memory_index>
        <index>'OBJECT_FIELD_METADATA'</index>
        <key_field>'static_oid'</key_field>
        <key_field>'field_name'</key_field>
        <field>'datatype'</field>
        <field>'namespace'</field>
        <field>'length'</field>
        <field>'rate_type'</field>
        <field>'unique_rate_row'</field>
      </define_memory_index>


      <define_memory_index>
        <index>'DYNAMIC_ENTITIES'</index>
        <key_field>'static_oid'</key_field>
        <field>'dynamic_oid'</field>
      </define_memory_index>

      <define_memory_index>
        <index>'SNAP_DYNAMIC_ENTITIES'</index>
        <key_field>'static_oid'</key_field>
        <field>'dynamic_oid'</field>
      </define_memory_index>

      <define_memory_index>
        <index>'TEMP_DYNAMIC_ENTITIES'</index>
        <key_field>'static_oid'</key_field>
        <field>'dynamic_oid'</field>
      </define_memory_index>

    </startup>
  </proc>


  <proc name="initialize">
    <do>GLOBAL.main_dir=GLOBAL.main_dir ne ''?GLOBAL.main_dir:'.'</do>
    <do>GLOBAL.entities_dir=GLOBAL.entities_dir ne ''?GLOBAL.entities_dir:GLOBAL.main_dir~'/entities'</do>
    <do>GLOBAL.generated_dir=GLOBAL.generated_dir ne ''?GLOBAL.generated_dir:GLOBAL.main_dir~'/generated'</do>
    <do>GLOBAL.generated_dm_dir=GLOBAL.generated_dm_dir ne ''?GLOBAL.generated_dm_dir:GLOBAL.main_dir~'/generated_domain_model'</do>
    <directory_exists>
      <input>GLOBAL.entities_dir</input>
      <output>TEMP.exists</output>
    </directory_exists>
    <directory_exists>
      <input>GLOBAL.generated_dir</input>
      <output>TEMP.exists</output>
    </directory_exists>
    <if>
      <condition>!TEMP.exists</condition>
      <then>
        <create_directory>GLOBAL.generated_dir</create_directory>
      </then>
    </if>
    <directory_exists>
      <input>GLOBAL.generated_dm_dir</input>
      <output>TEMP.exists</output>
    </directory_exists>
    <if>
      <condition>!TEMP.exists</condition>
      <then>
        <create_directory>GLOBAL.generated_dm_dir</create_directory>
      </then>
    </if>

    <generate_entities>
      <entities_glob>"crap"</entities_glob>
      <generate_dir>GLOBAL.generated_dir</generate_dir>
      <generate_domain_model_dir>GLOBAL.generated_dm_dir</generate_domain_model_dir>
    </generate_entities>


  </proc>


  <proc name="date_aware_merge">
    <param name="static_oid"/>
    <do>TEMP.previous_oid=''</do>
    <index_select>
      <index>'DYNAMIC_ENTITIES'</index>
      <field name='static_oid'>TEMP.static_oid</field>
      <cursor>TEMP.csr</cursor>
      <order_by>OBJECT(OBJECT(TEMP.csr).dynamic_oid).start_date</order_by>
      <loop>
        <do>TEMP.dynamic_oid=OBJECT(TEMP.csr).dynamic_oid</do>
        <do>TEMP.merge=0</do>
        <if>
          <condition>TEMP.previous_oid ne ''</condition>
          <then>
            <if>
              <condition>OBJECT(TEMP.previous_oid).end_date eq OBJECT(TEMP.dynamic_oid).start_date</condition>
              <then>
                <objects_equal>
                  <object_id>TEMP.previous_oid</object_id>
                  <object_id>TEMP.dynamic_oid</object_id>
                  <exclude_field name='start_date'/>
                  <exclude_field name='end_date'/>
                  <result>TEMP.merge</result>
                </objects_equal>
              </then>
            </if>
          </then>
        </if>
        <if>
          <condition>TEMP.merge</condition>
          <then>
            <do>OBJECT(TEMP.previous_oid).end_date=OBJECT(TEMP.dynamic_oid).end_date</do>
          </then>
          <else>
            <index_insert>
              <index>'TEMP_DYNAMIC_ENTITIES'</index>
              <field name='static_oid'>TEMP.static_oid</field>
              <field name='dynamic_oid'>TEMP.dynamic_oid</field>
            </index_insert>
            <do>TEMP.previous_oid=TEMP.dynamic_oid</do>
          </else>
        </if>
      </loop>
    </index_select>

    <index_remove>
      <index>'DYNAMIC_ENTITIES'</index>
      <field name='static_oid'>TEMP.static_oid</field>
    </index_remove>
    <index_select>
      <index>'TEMP_DYNAMIC_ENTITIES'</index>
      <field name='static_oid'>TEMP.static_oid</field>
      <cursor>TEMP.csr</cursor>
      <loop>
        <do>TEMP.dynamic_oid=OBJECT(TEMP.csr).dynamic_oid</do>
        <index_insert>
          <index>'DYNAMIC_ENTITIES'</index>
          <field name='static_oid'>TEMP.static_oid</field>
          <field name='dynamic_oid'>TEMP.dynamic_oid</field>
        </index_insert>
      </loop>
    </index_select>
    <index_remove>
      <index>'TEMP_DYNAMIC_ENTITIES'</index>
      <field name='static_oid'>TEMP.static_oid</field>
    </index_remove>
  </proc>



  <proc name="snap_dynamic_entities">
    <param name="static_oid"/>
    <index_remove>
      <index>'SNAP_DYNAMIC_ENTITIES'</index>
      <field name='static_oid'>TEMP.static_oid</field>
    </index_remove>
    <index_select>
      <index>'DYNAMIC_ENTITIES'</index>
      <field name='static_oid'>TEMP.static_oid</field>
      <cursor>TEMP.csr</cursor>
      <loop>
        <do>TEMP.dynamic_oid=OBJECT(TEMP.csr).dynamic_oid</do>
        <index_insert>
          <index>'SNAP_DYNAMIC_ENTITIES'</index>
          <field name='static_oid'>TEMP.static_oid</field>
          <field name='dynamic_oid'>TEMP.dynamic_oid</field>
        </index_insert>
      </loop>
    </index_select>
  </proc>

  <proc name="param_table_put">
    <if>
      <condition>OBJECT.rate_type eq ''</condition>
      <then>
        <do>OBJECT.rate_type = 'ICB'</do>
      </then>
    </if>
    <call_proc_for_current_object>
      <name>'add_rate_to_schedules'</name>
      <param name="rate_type">OBJECT.rate_type</param>
    </call_proc_for_current_object>
  </proc>

  <proc name='perform_child_to_parent_mapping'>
    <param name='dynamic_child_oid'/>
    <param name='dynamic_parent_oid'/>
    <debug>'child_to_parent_mapping of '~TEMP.dynamic_child_oid~'/'~OBJECT(TEMP.dynamic_child_oid).object_type~' to '~TEMP.dynamic_parent_oid~'/'~OBJECT(TEMP.dynamic_parent_oid).object_type</debug>
    <call_proc_for_object>
      <name>'entity_map_up'</name>
      <object_id>TEMP.dynamic_child_oid</object_id>
      <param name='child_oid'>TEMP.dynamic_child_oid</param>
      <param name='parent_oid'>TEMP.dynamic_parent_oid</param>
    </call_proc_for_object>
  </proc>

  <proc name='set_x2'>
    <do>OBJECT.x2='dude'</do>
  </proc>


  <proc name='print_dynamic_entities'>
    <param name='object_id' default='"not_set"'/>
    <if>
      <condition>TEMP.object_id eq 'not_set'</condition>
      <then>
        <do>TEMP.object_id=OBJECT.object_id</do>
      </then>
    </if>
    <print>'DYNAMIC ENTITIES FOR: '~TEMP.object_id~'/'~OBJECT(TEMP.object_id).object_type~'('</print>
    <index_select>
      <index>'DYNAMIC_ENTITIES'</index>
      <field name='static_oid'>TEMP.object_id</field>
      <cursor>TEMP.csr</cursor>
      <order_by>OBJECT(OBJECT(TEMP.csr).dynamic_oid).start_date</order_by>
      <loop>
        <do>TEMP.dynamic_oid=OBJECT(TEMP.csr).dynamic_oid</do>
        <call_proc_for_object>
          <name>'print_object'</name>
          <object_id>TEMP.dynamic_oid</object_id>
        </call_proc_for_object>
      </loop>
    </index_select>
    <print>')'</print>
  </proc>

  <proc name='debug_dynamic_entities'>
    <param name='object_id' default='"not_set"'/>
    <if>
      <condition>TEMP.object_id eq 'not_set'</condition>
      <then>
        <do>TEMP.object_id=OBJECT.object_id</do>
      </then>
    </if>
    <debug>'DYNAMIC ENTITIES FOR: '~TEMP.object_id~'/'~OBJECT(TEMP.object_id).object_type~'('</debug>
    <index_select>
      <index>'DYNAMIC_ENTITIES'</index>
      <field name='static_oid'>TEMP.object_id</field>
      <cursor>TEMP.csr</cursor>
      <loop>
        <do>TEMP.dynamic_oid=OBJECT(TEMP.csr).dynamic_oid</do>
        <call_proc_for_object>
          <name>'debug_object'</name>
          <object_id>TEMP.dynamic_oid</object_id>
        </call_proc_for_object>
      </loop>
    </index_select>
    <debug>')'</debug>
  </proc>

  <proc name='print_object'>
    <param name='object_id' default='"not_set"'/>
    <if>
      <condition>TEMP.object_id eq 'not_set'</condition>
      <then>
        <do>TEMP.object_id=OBJECT.object_id</do>
      </then>
    </if>
    <print>'OBJECT: '~TEMP.object_id~'/'~OBJECT(TEMP.object_id).object_type~'('</print>
    <object_field_value_select>
      <object_id>TEMP.object_id</object_id>
      <cursor>TEMP.c1</cursor>
      <cursor_field>'field'</cursor_field>
      <cursor_value>'value'</cursor_value>
      <loop>
        <print>'  '~OBJECT(TEMP.c1).field~' = ['~OBJECT(TEMP.c1).value~']'</print>
      </loop>
    </object_field_value_select>
    <print>')'</print>
  </proc>

  <proc name='debug_object'>
    <param name='object_id' default='"not_set"'/>
    <if>
      <condition>TEMP.object_id eq 'not_set'</condition>
      <then>
        <do>TEMP.object_id=OBJECT.object_id</do>
      </then>
    </if>
    <debug>'OBJECT: '~TEMP.object_id~'/'~OBJECT(TEMP.object_id).object_type~'('</debug>
    <object_field_value_select>
      <object_id>TEMP.object_id</object_id>
      <cursor>TEMP.c1</cursor>
      <cursor_field>'field'</cursor_field>
      <cursor_value>'value'</cursor_value>
      <loop>
        <debug>'  '~OBJECT(TEMP.c1).field~' = ['~OBJECT(TEMP.c1).value~']'</debug>
      </loop>
    </object_field_value_select>
    <debug>')'</debug>
  </proc>

  <!-- define 2-way split proc max of 3 lvalues -->
  <proc name='split'>
    <param name='value' mode='in out'/>
    <param name='delimiter'/>
    <param name='direction'/>
    <param name='left1' mode='in out'/>
    <param name='left2' mode='in out' default='"NotPassed"'/>
    <param name='left3' mode='in out' default='"NotPassed"'/>
    <if>
      <condition>TEMP.direction ne 'forward'</condition>
      <then>
        <do>TEMP.num_parts=1</do>
        <if>
          <condition>TEMP.left2 ne 'NotPassed'</condition>
          <then>
            <do>TEMP.num_parts+=1</do>
            <if>
              <condition>TEMP.left3 ne 'NotPassed'</condition>
              <then>
                <do>TEMP.num_parts+=1</do>
              </then>
            </if>
          </then>
        </if>
        <split>
          <source>TEMP.value</source>
          <delimiter>TEMP.value</delimiter>
          <limit>TEMP.num_parts</limit>
          <target>TEMP.left1</target>
          <target>TEMP.left2</target>
          <target>TEMP.left3</target>
        </split>
      </then>
      <condition>TEMP.direction ne 'reverse'</condition>
      <then>
        <do>TEMP.value=TEMP.left1</do>
        <if>
          <condition>TEMP.left2 ne 'NotPassed'</condition>
          <then>
            <do>TEMP.value=TEMP.value~TEMP.delimiter~TEMP.left2</do>
            <if>
              <condition>TEMP.left3 ne 'NotPassed'</condition>
              <then>
                <do>TEMP.value=TEMP.value~TEMP.delimiter~TEMP.left3</do>
              </then>
            </if>
          </then>
        </if>
      </then>
      <else>
        <fatal>'Error, calling to 2-way proc split, parameter direction=['~TEMP.direction~'] must be [forward] or [reverse]'</fatal>
      </else>
    </if>
  </proc>

</procs>